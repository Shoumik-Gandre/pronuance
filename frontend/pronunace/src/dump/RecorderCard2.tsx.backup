import { Avatar, Box, Card, IconButton, ListItem, ListItemAvatar, ListItemText, Tooltip } from '@mui/material';
import React, { useContext, useState } from 'react'
import MicIcon from '@mui/icons-material/Mic';
import MicOffIcon from '@mui/icons-material/MicOff';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import AuthContext from '../context/AuthContext';
import Recorder from 'recorder-js';


type RecorderCardProps = {
    id: number
    text: string
}

declare global {
    interface Window {
        webkitAudioContext: typeof AudioContext
    }
}


const RecorderCard = ({ id, text }: RecorderCardProps) => {

    let { authTokens, logoutUser } = useContext(AuthContext)

    let [isRecording, setIsRecording] = useState(false)
    let [blob, setBlob] = useState<any>(null)

    const audioContext = new (window.AudioContext || window.webkitAudioContext)();

    const recorder = new Recorder(audioContext, {});

    navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => recorder.init(stream))
        .catch(err => console.log('Uh oh... unable to get stream...', err));

    function startRecording() {
        recorder.start().then(() => {setIsRecording(true)})
        console.log("recording started")

    }

    function stopRecording() {
        recorder.stop().then(({ blob, buffer }) => { 
            setBlob(blob) 
            setIsRecording(false)
            console.log("recording stopped")
            getMask()
        });
    }

    function download() {
        Recorder.download(blob, 'my-audio-file') // downloads a .wav file
    }

    function exportWav() {
        Recorder.audioRecorder.exportWav(function (blob: any) {
            setBlob(blob);
        })
    }


    const getMask = async () => {

        let formData = new FormData()
        const soundFile = blob
        console.log(soundFile)

        formData.append('sound_file', soundFile)
        formData.append('sentence_id', String(id))



        let response = await fetch('http://127.0.0.1:8000/app/api/getmask/', {
            method: 'POST',
            headers: {
                // 'Content-Type': 'application/Json',
                // 'Content-Type': 'multipart/form-data',
                'Authorization': 'Bearer ' + String(authTokens.access)
            },
            body: formData
        })
        let data = await response.json()

        if (response.status === 200) { console.log(data.mask) }
        else if (response.statusText === "Unauthorized") { logoutUser() }
    }


    return (
        <Box m={1} pt={1}>

            <Card>
                <ListItem key={id}
                    secondaryAction={
                        <>
                        {(!isRecording) ? (
                            <Tooltip title="start recording">
                                <IconButton aria-label="start recording audio" onClick={startRecording} size="large" color="error">
                                    <MicIcon fontSize="inherit" />
                                </IconButton>
                            </Tooltip>
                        ) : (
                            <Tooltip title="stop recording">
                                <IconButton aria-label="stop recording audio" onClick={stopRecording} size="large" color="secondary">
                                    <MicOffIcon fontSize="inherit" />
                                </IconButton>
                            </Tooltip>
                        )}
                        </>
                    }
                >
                    <ListItemAvatar>
                        <Avatar>
                            <ArrowForwardIosIcon />
                        </Avatar>
                    </ListItemAvatar>
                    <ListItemText
                        primary={text}
                    // secondary={(status === 'recording') && 'Speak Now'}
                    />
                </ListItem>
            </Card>
        </Box>
    );
}

export default RecorderCard